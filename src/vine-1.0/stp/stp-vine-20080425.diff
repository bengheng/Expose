Index: AST/ToSAT.cpp
===================================================================
--- AST/ToSAT.cpp	(Original)
+++ AST/ToSAT.cpp	(Vine)
@@ -864,6 +864,57 @@
     //os << "\nEND OF COUNTEREXAMPLE" << endl;
   } //End of PrintCounterExample
 
+  /*
+   * create a true list of Counter Example, need to 'free' the returned
+   * null-terminated array after finish using it to avoid memory leak
+   */
+  ASTNode** BeevMgr::GetTrueCounterExampleFst() {
+    ASTNode** trueCEFst = (ASTNode**) malloc (sizeof(ASTNode*) * CounterExampleMap.size());
+    int i = 0;
+
+    ASTNodeMap::iterator it  = CounterExampleMap.begin();
+    ASTNodeMap::iterator itend = CounterExampleMap.end();
+    for(;it!=itend;it++) {
+      ASTNode f = it->first;
+      if(f.GetKind() == SYMBOL && (_introduced_symbols.find(f) != _introduced_symbols.end()))
+	continue;
+      if(f.GetKind() == SYMBOL ||
+	 (f.GetKind() == READ && f[0].GetKind() == SYMBOL && f[1].GetKind() == BVCONST)) {
+        trueCEFst[i++] = new ASTNode(f);
+      }
+      trueCEFst[i] = 0; // null terminate
+    }
+
+    return trueCEFst;
+  } //End of GetTrueCounterExampleFst
+
+  /*
+   * create a true list of Counter Example, need to 'free' the returned
+   * null-terminated array after finish using it to avoid memory leak
+   */
+  ASTNode** BeevMgr::GetTrueCounterExampleSnd() {
+    ASTNode** trueCESnd = (ASTNode**) malloc (sizeof(ASTNode*) * CounterExampleMap.size());
+    int i = 0;
+
+    ASTNodeMap::iterator it  = CounterExampleMap.begin();
+    ASTNodeMap::iterator itend = CounterExampleMap.end();
+    for(;it!=itend;it++) {
+      ASTNode f = it->first;
+      ASTNode se = it->second;
+      if(f.GetKind() == SYMBOL && (_introduced_symbols.find(f) != _introduced_symbols.end()))
+	continue;
+      if(f.GetKind() == SYMBOL ||
+	 (f.GetKind() == READ && f[0].GetKind() == SYMBOL && f[1].GetKind() == BVCONST)) {
+        trueCESnd[i++] = new ASTNode(se);
+      }
+      trueCESnd[i] = 0; // null terminate
+    }
+
+    return trueCESnd;
+  } //End of GetTrueCounterExampleSnd
+
+   
+
   /* iterate through the CounterExampleMap data structure and print it
    * to stdout. this function prints only the declared array variables
    * IN the ORDER in which they were declared. It also assumes that
Index: AST/AST.h
===================================================================
--- AST/AST.h	(Original)
+++ AST/AST.h	(Vine)
@@ -1665,6 +1665,11 @@
     //counter-examples in their own data structures.
     ASTNodeMap GetCompleteCounterExample() {return CounterExampleMap;}
 
+    // create a true list of Counter Example, need to 'delete' the returned
+    // Map after finish using it to avoid memory leak
+    ASTNode** GetTrueCounterExampleFst();
+    ASTNode** GetTrueCounterExampleSnd();
+
     // prints MINISAT assigment one bit at a time, for debugging.
     void PrintSATModel(MINISAT::Solver& S);
 
Index: c_interface/c_interface.cpp
===================================================================
--- c_interface/c_interface.cpp	(Original)
+++ c_interface/c_interface.cpp	(Vine)
@@ -1544,3 +1544,15 @@
 
     return q.GetNodeNum();
 }
+
+Expr * GetTrueCounterExampleFst(VC vc) {
+  bmstar b = (bmstar)vc;
+  Expr * es = (Expr *) (b->GetTrueCounterExampleFst());
+  return es;
+}
+
+Expr * GetTrueCounterExampleSnd(VC vc) {
+  bmstar b = (bmstar)vc;
+  Expr * es = (Expr *) (b->GetTrueCounterExampleSnd());
+  return es;
+}
Index: c_interface/c_interface.h
===================================================================
--- c_interface/c_interface.h	(Original)
+++ c_interface/c_interface.h	(Vine)
@@ -392,6 +392,10 @@
   // get the node ID of an Expr.
   int getExprID (Expr ex);
 
+  // get/clean up a null-terminated array of true counter examples
+  Expr * GetTrueCounterExampleFst(VC vc);
+  Expr * GetTrueCounterExampleSnd(VC vc);
+
 #ifdef __cplusplus
 }
 #endif
Index: Makefile.common
===================================================================
--- Makefile.common	(Original)
+++ Makefile.common	(Vine)
@@ -32,8 +32,8 @@
   CFLAGS = -isysroot $(UNIVERSAL_SDK) $(UNIVERSAL_ARCH) $(CFLAGS_BASE)
 else
   LDFLAGS = $(LDFLAGS_BASE)
-#  CFLAGS = $(CFLAGS_BASE) -static
-  CFLAGS = $(CFLAGS_BASE)
+  CFLAGS = $(CFLAGS_BASE) -static
+#  CFLAGS = $(CFLAGS_BASE)
 endif
 
 CXXFLAGS = $(CFLAGS) -Wall -DEXT_HASH_MAP
