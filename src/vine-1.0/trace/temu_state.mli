(*
Vine is Copyright (C) 2006-2009, BitBlaze Team.

You can redistribute and modify it under the terms of the GNU GPL,
version 2 or later, but it is made available WITHOUT ANY WARRANTY.
See the top-level README file for more details.

For more information about Vine and other BitBlaze software, see our
web site at: http://bitblaze.cs.berkeley.edu/
*)

(**
   An interface to program state files generated by TEMU. 
*)

exception Unknown_state_version

(** Registers in a state file *)
type userRegs = {
  eax : int32;
  ebx : int32;
  ecx : int32;
  edx : int32;
  esi : int32;
  edi : int32;
  ebp : int32;
  esp : int32;
  eip : int32;
  eflags : int32;
  xcs : int32;
  xds : int32;
  xes : int32;
  xfs : int32;
  xgs : int32;
  xss : int32;
}

(** A block (i.e., range) of addresses in a state file.
    (both first and last addresses belong to the block 
*)
type block = {
  first : Libasmir.address_t;
  last  : Libasmir.address_t;
  pos : int64;
}

(** Class for state interface *)
class state_interface : 
  int -> 
  in_channel -> 
  IO.input -> 
  userRegs -> 
  block list ->
object
  (** [state#version] returns the version of the state file *)
  method version : int

  (** [state#blocks] returns the list of memory blocks in the state file *)
  method blocks : block list

  (** [state#num_blocks] returns the number of block in the state file O(1) *)
  method num_blocks : int

  (** [state#regs] returns the register structure in the state file *)
  method regs : userRegs

  (** [state#cleanup] Cleans the interface. Use close_state instead *)
  method cleanup : unit

  (** [state#get_memrange start end] extracts the values for all memory 
      addresses in the range from [start] to [end] (inclusive) 
      from the state file.
      Returns a list of char where the head corresponds to the value
      at address [start]. *)
  method get_memrange : Libasmir.address_t -> Libasmir.address_t -> 
    (Libasmir.address_t*char) list

  (** [state#range_inits range_l memvar] returns a Vine statement list with 
      memory initializers for all memory locations in all the ranges 
      specified by [range_l], where each range is: (start,end) 
      [memvar] is the memory variable used in the initializers *)
  method range_inits : (int64*int64) list -> Vine.var -> Vine.stmt list

  (** [state#iter_range ?fill_char f first_addr last_addr] 
      applies function [f] to all pairs (address,raw byte) in the interval from 
      [first_addr] to [last_addr] (inclusive).
      If the content of some addresses in the range are missing in 
      the state file, they are replaced by [fill_char], 
      thus [f] is also called on those addresses.
  *)
  method iter_range : ?fill_char : char -> 
    (Libasmir.address_t -> char -> unit) ->
    Libasmir.address_t -> Libasmir.address_t -> unit


  (** [state#write_range ?fill_char oc first_addr last_addr] 
      writes the raw bytes in the interval from [first_addr] to [last_addr] 
      (inclusive) to the given output channel [oc].
      If some bytes are missing in the state file, 
      they are replaced by [fill_char]
  *)
  method write_range : ?fill_char : char -> out_channel -> 
    Libasmir.address_t -> Libasmir.address_t -> unit

end

(** [print_block oc blk] prints information on [blk] to given output
    channel [oc] *)
val print_block : out_channel -> block -> unit

(** [print_regs oc regs] prints register values [regs] to given output
    channel [oc] *)
val print_regs : out_channel -> userRegs -> unit

(** [open_state filename] opens the given state file [filename], 
    returning the state inferface
    Raises Not_found, Unknown_state_version *)
val open_state : string -> state_interface

(** [close_state state] closes a state interface [state] 
    To be called when done using the state_interface *)
val close_state : state_interface -> unit

(** [add_range_inits_to_prog prog range_l memvar state] adds Vine memory 
    initializers to given program [prog] for the memory ranges specified 
    by [range_l] in the state interface [state] 
    using the memory variable [memvar].
    Returns an updated Vine program with the memory initializers *)
val add_range_inits_to_prog : Vine.program -> (int64*int64) list -> 
  Vine.var -> state_interface -> Vine.program

(** [generate_range_inits filename range_l memvar] generates Vine memory 
    initializers for the memory ranges specified 
    by [range_l] in the state file [filename] 
    using the memory variable [memvar].
    Returns the memory initializers as a list of Vine statements *)
val generate_range_inits : string -> (int64*int64) list -> Vine.var -> 
  Vine.stmt list

